@import "var.less";
@import "function.less";
.form-control {
  display: block;
  width: 100%;
  // // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  height: @input-height;
  padding: @input-padding-y @input-padding-x;
  font-size: @font-size-base;
  line-height: @input-line-height;
  color: @input-color;
  background-color: @input-bg;
  // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214.
  background-image: none;
  background-clip: padding-box;
  border: 1px solid @input-border-color;
  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  border-radius: @input-border-radius;

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  &:focus {
    color: @input-color-focus;
    background-color: @input-bg-focus;
    border-color: @input-border-focus;
    outline: none;
  }

  // Placeholder
  &::placeholder {
    color: @input-color-placeholder;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: @input-bg-disabled;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  &:disabled {
    cursor: @cursor-disabled;
  }
}

.form-control.error {
  border-color: @error-color;
  color: @error-color;
}
select.form-control {
  &:not([size]):not([multiple]) {
    height: @input-height;
  }

  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: @input-color;
    background-color: @input-bg;
  }
}

.textarea-control {
  padding: 14px 20px 30px;
  width: 805px;
  height: 112px;
  margin-top: 4px;
  margin-bottom: 16px;
  position: relative;
  textarea.form-control{
    position: relative;
    padding: 0;
    margin: 0;
    height: 100%;
    width: 100%;
    border: none;
    resize: none;
    z-index: 1;
    & + .textarea-border{
      display: block;
      content: " ";
      position: absolute;
      .border1(@input-border-color);
      left: 0px;
      right: 0px;
      top: 0px;
      bottom: 0px;
      .rd(4px);
    }
    &:focus + .textarea-border {
      border-color: @input-border-focus;
    }
  }
  .text-length {
    float: right;
    color: @tip-color;
    .font(12, 18px);
    margin-top: 5px;
  }
}

.form-group {
  .form-control {
    margin-top: 4px;
    margin-bottom: 16px;
  }

  label {
    .font(14, 21);
    color: #222C38;
  }
  .form-tip {
    float: right;
    .font(12, 18);
    color: @tip-color;
    &:after {
      display: table;
      content:" ";
      clear: both;
    }
  }
  .error-tip{
    .form-tip();
    color: @error-color;
    > p {
      line-height: 18px;
    }
  }
}
.inline-control .form-control {
  display: inline-block;
}
.tip-text {
  .tip-text();
}
// angular integrate
.ng-invalid.form-control{
  border-color: @error-color;
}
.ng-empty.ng-touched.form-control{
  border-color: @error-color;
}
//
.required{
  color: @require-color;
}
